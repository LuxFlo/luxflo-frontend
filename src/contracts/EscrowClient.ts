/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import {
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  CoreAppCallArgs,
  RawAppCallArgs,
  AppState,
  TealTemplateParams,
  ABIAppCallArg,
} from '@algorandfoundation/algokit-utils/types/app'
import {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import { SendTransactionResult, TransactionToSign, SendTransactionFrom } from '@algorandfoundation/algokit-utils/types/transaction'
import { Algodv2, OnApplicationComplete, Transaction, TransactionWithSigner, AtomicTransactionComposer } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "createApplication(asset,address,address,address,uint64,string,uint64)void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "getParties()(address,address,address)": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "renterArbitration()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "ownerArbitration()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "ownerWithdraw()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arbiterWithdraw()void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "asa": {
          "type": "uint64",
          "key": "asa"
        },
        "renter": {
          "type": "bytes",
          "key": "renter"
        },
        "owner": {
          "type": "bytes",
          "key": "owner"
        },
        "arbiter": {
          "type": "bytes",
          "key": "arbiter"
        },
        "amount": {
          "type": "uint64",
          "key": "amount"
        },
        "terms": {
          "type": "bytes",
          "key": "terms"
        },
        "expiresTime": {
          "type": "uint64",
          "key": "expiresTime"
        },
        "arbitration": {
          "type": "uint64",
          "key": "arbitration"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 4,
      "num_uints": 4
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDk="
  },
  "contract": {
    "name": "Escrow",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "args": [
          {
            "name": "asa",
            "type": "asset",
            "desc": ""
          },
          {
            "name": "renter",
            "type": "address",
            "desc": ""
          },
          {
            "name": "owner",
            "type": "address",
            "desc": ""
          },
          {
            "name": "arbiter",
            "type": "address",
            "desc": ""
          },
          {
            "name": "amount",
            "type": "uint64",
            "desc": ""
          },
          {
            "name": "terms",
            "type": "string",
            "desc": ""
          },
          {
            "name": "contractLength",
            "type": "uint64",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "getParties",
        "args": [],
        "desc": "",
        "returns": {
          "type": "(address,address,address)",
          "desc": ""
        }
      },
      {
        "name": "renterArbitration",
        "args": [],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "ownerArbitration",
        "args": [],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "ownerWithdraw",
        "args": [],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "arbiterWithdraw",
        "args": [],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      }
    ]
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt 
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

/**
 * Defines the types of available calls and state of the Escrow smart contract.
 */
export type Escrow = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication(asset,address,address,address,uint64,string,uint64)void' | 'createApplication', {
      argsObj: {
        asa: number | bigint
        renter: string
        owner: string
        arbiter: string
        amount: bigint | number
        terms: string
        contractLength: bigint | number
      }
      argsTuple: [asa: number | bigint, renter: string, owner: string, arbiter: string, amount: bigint | number, terms: string, contractLength: bigint | number]
      returns: void
    }>
    & Record<'getParties()(address,address,address)' | 'getParties', {
      argsObj: {
      }
      argsTuple: []
      returns: [string, string, string]
    }>
    & Record<'renterArbitration()void' | 'renterArbitration', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'ownerArbitration()void' | 'ownerArbitration', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'ownerWithdraw()void' | 'ownerWithdraw', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'arbiterWithdraw()void' | 'arbiterWithdraw', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      'asa'?: IntegerState
      'renter'?: BinaryState
      'owner'?: BinaryState
      'arbiter'?: BinaryState
      'amount'?: IntegerState
      'terms'?: BinaryState
      'expiresTime'?: IntegerState
      'arbitration'?: IntegerState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type EscrowSig = keyof Escrow['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends EscrowSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the Escrow smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends EscrowSig> = Escrow['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Escrow smart contract to the method's return type
 */
export type MethodReturn<TSignature extends EscrowSig> = Escrow['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type EscrowCreateCalls = (typeof EscrowCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type EscrowCreateCallParams =
  | (TypedCallParams<'createApplication(asset,address,address,address,uint64,string,uint64)void'> & (OnCompleteNoOp))
/**
 * Defines arguments required for the deploy method.
 */
export type EscrowDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: EscrowCreateCalls) => EscrowCreateCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class EscrowCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the Escrow smart contract using the createApplication(asset,address,address,address,uint64,string,uint64)void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      createApplication(args: MethodArgs<'createApplication(asset,address,address,address,uint64,string,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: 'createApplication(asset,address,address,address,uint64,string,uint64)void' as const,
          methodArgs: Array.isArray(args) ? args : [args.asa, args.renter, args.owner, args.arbiter, args.amount, args.terms, args.contractLength],
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the getParties()(address,address,address) ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getParties(args: MethodArgs<'getParties()(address,address,address)'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getParties()(address,address,address)' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the renterArbitration()void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static renterArbitration(args: MethodArgs<'renterArbitration()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'renterArbitration()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the ownerArbitration()void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static ownerArbitration(args: MethodArgs<'ownerArbitration()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'ownerArbitration()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the ownerWithdraw()void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static ownerWithdraw(args: MethodArgs<'ownerWithdraw()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'ownerWithdraw()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the arbiterWithdraw()void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static arbiterWithdraw(args: MethodArgs<'arbiterWithdraw()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'arbiterWithdraw()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
}

/**
 * A client to make calls to the Escrow smart contract
 */
export class EscrowClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `EscrowClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue }
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof Escrow['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the Escrow smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: EscrowDeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(EscrowCallFactory.create)
    return this.appClient.deploy({
      ...params,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the Escrow smart contract using the createApplication(asset,address,address,address,uint64,string,uint64)void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result
       */
      async createApplication(args: MethodArgs<'createApplication(asset,address,address,address,uint64,string,uint64)void'>, params: AppClientCallCoreParams & AppClientCompilationParams & (OnCompleteNoOp) = {}): Promise<AppCallTransactionResultOfType<MethodReturn<'createApplication(asset,address,address,address,uint64,string,uint64)void'>>> {
        return $this.mapReturnValue(await $this.appClient.create(EscrowCallFactory.create.createApplication(args, params)))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the Escrow smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the getParties()(address,address,address) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getParties(args: MethodArgs<'getParties()(address,address,address)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(EscrowCallFactory.getParties(args, params))
  }

  /**
   * Calls the renterArbitration()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public renterArbitration(args: MethodArgs<'renterArbitration()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(EscrowCallFactory.renterArbitration(args, params))
  }

  /**
   * Calls the ownerArbitration()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public ownerArbitration(args: MethodArgs<'ownerArbitration()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(EscrowCallFactory.ownerArbitration(args, params))
  }

  /**
   * Calls the ownerWithdraw()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public ownerWithdraw(args: MethodArgs<'ownerWithdraw()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(EscrowCallFactory.ownerWithdraw(args, params))
  }

  /**
   * Calls the arbiterWithdraw()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public arbiterWithdraw(args: MethodArgs<'arbiterWithdraw()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(EscrowCallFactory.arbiterWithdraw(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<Escrow['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get asa() {
        return EscrowClient.getIntegerState(state, 'asa')
      },
      get renter() {
        return EscrowClient.getBinaryState(state, 'renter')
      },
      get owner() {
        return EscrowClient.getBinaryState(state, 'owner')
      },
      get arbiter() {
        return EscrowClient.getBinaryState(state, 'arbiter')
      },
      get amount() {
        return EscrowClient.getIntegerState(state, 'amount')
      },
      get terms() {
        return EscrowClient.getBinaryState(state, 'terms')
      },
      get expiresTime() {
        return EscrowClient.getIntegerState(state, 'expiresTime')
      },
      get arbitration() {
        return EscrowClient.getIntegerState(state, 'arbitration')
      },
    }
  }

  public compose(): EscrowComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      getParties(args: MethodArgs<'getParties()(address,address,address)'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getParties(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      renterArbitration(args: MethodArgs<'renterArbitration()void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.renterArbitration(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      ownerArbitration(args: MethodArgs<'ownerArbitration()void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.ownerArbitration(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      ownerWithdraw(args: MethodArgs<'ownerWithdraw()void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.ownerWithdraw(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      arbiterWithdraw(args: MethodArgs<'arbiterWithdraw()void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.arbiterWithdraw(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async execute() {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams: {} }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as EscrowComposer
  }
}
export type EscrowComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the getParties()(address,address,address) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getParties(args: MethodArgs<'getParties()(address,address,address)'>, params?: AppClientCallCoreParams & CoreAppCallArgs): EscrowComposer<[...TReturns, MethodReturn<'getParties()(address,address,address)'>]>

  /**
   * Calls the renterArbitration()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  renterArbitration(args: MethodArgs<'renterArbitration()void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): EscrowComposer<[...TReturns, MethodReturn<'renterArbitration()void'>]>

  /**
   * Calls the ownerArbitration()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  ownerArbitration(args: MethodArgs<'ownerArbitration()void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): EscrowComposer<[...TReturns, MethodReturn<'ownerArbitration()void'>]>

  /**
   * Calls the ownerWithdraw()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  ownerWithdraw(args: MethodArgs<'ownerWithdraw()void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): EscrowComposer<[...TReturns, MethodReturn<'ownerWithdraw()void'>]>

  /**
   * Calls the arbiterWithdraw()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arbiterWithdraw(args: MethodArgs<'arbiterWithdraw()void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): EscrowComposer<[...TReturns, MethodReturn<'arbiterWithdraw()void'>]>

  /**
   * Makes a clear_state call to an existing instance of the Escrow smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs): EscrowComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): EscrowComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Executes the transaction group and returns an array of results
   */
  execute(): Promise<EscrowComposerResults<TReturns>>
}
export type EscrowComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
